#!/usr/bin/env python3

class morse:
  def __init__(self, line = "", b = "."):
    self.line = line
    self.buf = b

    self.dah = "dah"
    self.dit = "dit"
    self.di = "di"
    self.end = "."

    if line != "":
      l = line.split(" ")
      if len(l) == 1:
        self.di  = l[0][0]
        self.end = ""

        if len(l[0]) == 2:
          self.dit = self.di
          self.dah = l[0][1]

        else:
          self.dit = l[0][1]
          self.dah = l[0][2]

        if len(l[0]) > 3: 
          self.end = l[0][3]

      elif len(l) == 2:
        self.di  = l[0]
        self.dit = self.di
        self.dah = l[1]

      else:
        self.di  = l[0]
        self.dit = l[1]
        self.dah = l[2]

      if len(l) > 3: 
        self.end = l[3]

  def __invert__(self):
    return morse(self.line, ", " + self.buf)
  
  def __pos__(self):
    k = ("" if self.line and len(self.line.split(" ")) == 1 else " ")
    return morse(self.line, self.di + k + self.buf)
          
  def __neg__(self):
    k = ("" if self.line and len(self.line.split(" ")) == 1 else " ")
    return morse(self.line, self.dah + k + self.buf)

  def __str__(self):
    if self.line and len(self.line.split(" ")) == 1:
      self.buf = self.buf.replace(self.di + ",", self.dit)
      self.buf = self.buf.replace(self.dah + ",", self.dah)
      self.buf = self.buf[: -1]

      if self.buf[-1] == self.di:
        self.buf = self.buf[:-1] + self.dit + self.end

      else:
        self.buf += self.end

    else:
      self.buf = self.buf.replace(self.di + " ,", self.dit + ",")
      self.buf = self.buf.replace(self.dah + " ,", self.dah + ",")
      self.buf = self.buf.replace(self.di + " .", self.dit + self.end)
      self.buf = self.buf.replace(self.dah + " .", self.dah + self.end)

    return self.buf

# print(-+morse())
# print(-++~+-+morse())
# print(--+~-~-++~+++-morse())
# print(--+~-~-++~+++-morse(".-"))
# print(--+~-~-++~+++-morse("..-"))
# print(--+~-~-++~+++-morse("..-|"))
# print(--+~-~-++~+++-morse("dot DOT dash"))
# print(--+~-~-++~+++-morse("ai aui oi "))
# print(--+~-~-++~+++-morse("dot dot dash ///")) 

# N = 200
# x, a, c, m = 8, 1366, 1283, 6075 
# sign = "".join("++--~"[(x:=(a*x+c)%m)//2%5] for i in range(N))
# # print(sign)
# assert(str(eval(f"{sign}morse('^:@')")) == "^@^@^@@^^^@ ^: : ^^^@ ^@^^@^: @ ^^^@@@: @@@@^: ^^^: ^: : @@ : ^: @@@^^^@^@ ^@@^^^@@^^: ^@ : ^@ : ^@ : ^^^^@@: @ ^: : ^@ : @@^^@^: @@^: ^@^@^@@^: @ @@ @@@@^@@@@ : @: @@^@^@@^^^@ ^^^@@^: ^@@: @ ^: @@^@:")

# N = 2000
# x, a, c, m = 8, 1366, 1283, 6075 
# sign = "".join("++--~"[(x:=(a*x+c)%m)//2%5] for i in range(N))
# # print(eval(f"{sign}morse('1234')"))
# assert(str(eval(f"{sign}morse('1234')")) == "13131331113 12 2 1113 1311312 3 1113332 333312 1112 12 2 33 2 12 333111313 13311133112 13 2 13 2 13 2 1111332 3 12 2 13 2 3311312 3312 131313312 3 33 333313333 2 32 33131331113 1113312 1332 3 12 331313 1111332 133312 32 2 32 3 131133312 3113333 333113 33 3 32 2 3113332 3 1113 3312 13 1332 3 3313 13 1312 3 1112 3113313 2 3113 311131113312 3312 3 33 3312 3 111131113333 3 131331113 33 3 12 1313 133111313 2 13 3333 2 32 3 32 3313 3 1313313 3333 2 3312 1111312 2 3313 13 33311333312 32 33131333313313 3 13 3 13 2 1313 13113311331112 13 1333 3312 3 1313 32 2 3313312 2 3112 3112 3313 13 3 1312 111131313 33 3 32 13131333313 33 131313 12 331111332 3 12 3313 131312 1312 1313 32 131311313 3313 333113 3112 1113 3111313 3 32 1312 2 32 3331113311131112 1111331133331133112 3313 32 1312 1313 2 33 333313 12 1333 3 1113 3112 33 133311313 1332 3 3311333 2 1312 12 3333 3333133111333312 13 3 3113 13 3 13 331113 311333113333 3313 13331331111312 3 3312 3313 33 2 331131112 12 2 111331311332 2 33 1333 133313 13 133312 311133313 1313 12 331313313 1332 3 12 3313 2 1112 12 13111133313313 2 1312 33 1312 333113 13 1312 133113 331133313313 3 3113313 1313 3 33 2 3312 331131312 3312 33 3333 131111332 2 331131112 33 3 3113 12 3 311333112 11133131131312 3111332 2 3112 1113312 3 33 3 3313332 1332 1313 2 12 331312 32 2 12 2 3111333 131113332 1332 3 13 2 33 333113 111133313332 2 131331112 3313313 3313 3312 133111332 3333 3 32 33131131313332 2 12 131113 32 3 3312 33 3 1311333 2 3113 32 3332 3 32 133113 12 3 3112 3112 13 3313 3333 1313 3 3111313133131333112 12 3 1313 32 3333 3 13 2 12 3 13 3312 131313 3313 3113332 2 12 133312 1111333 2 13 331113 12 3 32 3 1311312 3 1113332 333312 1112 12 2 33 2 12 333111313 13311133112 33 1313 2 13 2 1112 3313 12 2 33 3 3111312 3313 131113 12 3 33 333313333 2 32 2 1313 1113 1113 13 131113 1313313 3 12 1332 333313 32 2 3113 131333312 3113313 331312 33 3 12 2 3113332 331113 3312 13 133113 3313 13 1312 3 12 2 3111313 2 3113 311131113312 331113 32 33131331112 1113 33 3 1311312 4")

# EOF